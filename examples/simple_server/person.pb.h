// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_person_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_person_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_person_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_person_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_person_2eproto;
namespace db {
class tb_Person;
class tb_PersonDefaultTypeInternal;
extern tb_PersonDefaultTypeInternal _tb_Person_default_instance_;
}  // namespace db
PROTOBUF_NAMESPACE_OPEN
template<> ::db::tb_Person* Arena::CreateMaybeMessage<::db::tb_Person>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace db {

enum MSGID : int {
  MSGID_default = 0,
  MSGID_tb_Person = 1004,
  MSGID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MSGID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MSGID_IsValid(int value);
constexpr MSGID MSGID_MIN = MSGID_default;
constexpr MSGID MSGID_MAX = MSGID_tb_Person;
constexpr int MSGID_ARRAYSIZE = MSGID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MSGID_descriptor();
template<typename T>
inline const std::string& MSGID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MSGID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MSGID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MSGID_descriptor(), enum_t_value);
}
inline bool MSGID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MSGID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MSGID>(
    MSGID_descriptor(), name, value);
}
enum PhoneType : int {
  MOBILE = 0,
  HOME = 1,
  WORK = 2,
  PhoneType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PhoneType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PhoneType_IsValid(int value);
constexpr PhoneType PhoneType_MIN = MOBILE;
constexpr PhoneType PhoneType_MAX = WORK;
constexpr int PhoneType_ARRAYSIZE = PhoneType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PhoneType_descriptor();
template<typename T>
inline const std::string& PhoneType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PhoneType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PhoneType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PhoneType_descriptor(), enum_t_value);
}
inline bool PhoneType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PhoneType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PhoneType>(
    PhoneType_descriptor(), name, value);
}
// ===================================================================

class tb_Person PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db.tb_Person) */ {
 public:
  inline tb_Person() : tb_Person(nullptr) {}
  virtual ~tb_Person();

  tb_Person(const tb_Person& from);
  tb_Person(tb_Person&& from) noexcept
    : tb_Person() {
    *this = ::std::move(from);
  }

  inline tb_Person& operator=(const tb_Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline tb_Person& operator=(tb_Person&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const tb_Person& default_instance();

  static inline const tb_Person* internal_default_instance() {
    return reinterpret_cast<const tb_Person*>(
               &_tb_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(tb_Person& a, tb_Person& b) {
    a.Swap(&b);
  }
  inline void Swap(tb_Person* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tb_Person* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline tb_Person* New() const final {
    return CreateMaybeMessage<tb_Person>(nullptr);
  }

  tb_Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<tb_Person>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const tb_Person& from);
  void MergeFrom(const tb_Person& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tb_Person* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "db.tb_Person";
  }
  protected:
  explicit tb_Person(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_person_2eproto);
    return ::descriptor_table_person_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kEmailFieldNumber = 5,
    kItemlistFieldNumber = 20,
    kEquiplistFieldNumber = 21,
    kTasklistFieldNumber = 22,
    kSkilllistFieldNumber = 23,
    kUuidFieldNumber = 1,
    kNumberFieldNumber = 4,
    kJobFieldNumber = 2,
    kPhonetypeFieldNumber = 6,
    kMoneyFieldNumber = 7,
    kCashFieldNumber = 8,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 5;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // bytes itemlist = 20;
  void clear_itemlist();
  const std::string& itemlist() const;
  void set_itemlist(const std::string& value);
  void set_itemlist(std::string&& value);
  void set_itemlist(const char* value);
  void set_itemlist(const void* value, size_t size);
  std::string* mutable_itemlist();
  std::string* release_itemlist();
  void set_allocated_itemlist(std::string* itemlist);
  private:
  const std::string& _internal_itemlist() const;
  void _internal_set_itemlist(const std::string& value);
  std::string* _internal_mutable_itemlist();
  public:

  // bytes equiplist = 21;
  void clear_equiplist();
  const std::string& equiplist() const;
  void set_equiplist(const std::string& value);
  void set_equiplist(std::string&& value);
  void set_equiplist(const char* value);
  void set_equiplist(const void* value, size_t size);
  std::string* mutable_equiplist();
  std::string* release_equiplist();
  void set_allocated_equiplist(std::string* equiplist);
  private:
  const std::string& _internal_equiplist() const;
  void _internal_set_equiplist(const std::string& value);
  std::string* _internal_mutable_equiplist();
  public:

  // bytes tasklist = 22;
  void clear_tasklist();
  const std::string& tasklist() const;
  void set_tasklist(const std::string& value);
  void set_tasklist(std::string&& value);
  void set_tasklist(const char* value);
  void set_tasklist(const void* value, size_t size);
  std::string* mutable_tasklist();
  std::string* release_tasklist();
  void set_allocated_tasklist(std::string* tasklist);
  private:
  const std::string& _internal_tasklist() const;
  void _internal_set_tasklist(const std::string& value);
  std::string* _internal_mutable_tasklist();
  public:

  // bytes skilllist = 23;
  void clear_skilllist();
  const std::string& skilllist() const;
  void set_skilllist(const std::string& value);
  void set_skilllist(std::string&& value);
  void set_skilllist(const char* value);
  void set_skilllist(const void* value, size_t size);
  std::string* mutable_skilllist();
  std::string* release_skilllist();
  void set_allocated_skilllist(std::string* skilllist);
  private:
  const std::string& _internal_skilllist() const;
  void _internal_set_skilllist(const std::string& value);
  std::string* _internal_mutable_skilllist();
  public:

  // uint64 uuid = 1;
  void clear_uuid();
  ::PROTOBUF_NAMESPACE_ID::uint64 uuid() const;
  void set_uuid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uuid() const;
  void _internal_set_uuid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 number = 4;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 job = 2;
  void clear_job();
  ::PROTOBUF_NAMESPACE_ID::int32 job() const;
  void set_job(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_job() const;
  void _internal_set_job(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .db.PhoneType phonetype = 6;
  void clear_phonetype();
  ::db::PhoneType phonetype() const;
  void set_phonetype(::db::PhoneType value);
  private:
  ::db::PhoneType _internal_phonetype() const;
  void _internal_set_phonetype(::db::PhoneType value);
  public:

  // double money = 7;
  void clear_money();
  double money() const;
  void set_money(double value);
  private:
  double _internal_money() const;
  void _internal_set_money(double value);
  public:

  // float cash = 8;
  void clear_cash();
  float cash() const;
  void set_cash(float value);
  private:
  float _internal_cash() const;
  void _internal_set_cash(float value);
  public:

  // @@protoc_insertion_point(class_scope:db.tb_Person)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr itemlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr equiplist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tasklist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skilllist_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uuid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 number_;
  ::PROTOBUF_NAMESPACE_ID::int32 job_;
  int phonetype_;
  double money_;
  float cash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_person_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// tb_Person

// uint64 uuid = 1;
inline void tb_Person::clear_uuid() {
  uuid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 tb_Person::_internal_uuid() const {
  return uuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 tb_Person::uuid() const {
  // @@protoc_insertion_point(field_get:db.tb_Person.uuid)
  return _internal_uuid();
}
inline void tb_Person::_internal_set_uuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  uuid_ = value;
}
inline void tb_Person::set_uuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:db.tb_Person.uuid)
}

// int32 job = 2;
inline void tb_Person::clear_job() {
  job_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tb_Person::_internal_job() const {
  return job_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tb_Person::job() const {
  // @@protoc_insertion_point(field_get:db.tb_Person.job)
  return _internal_job();
}
inline void tb_Person::_internal_set_job(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  job_ = value;
}
inline void tb_Person::set_job(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_job(value);
  // @@protoc_insertion_point(field_set:db.tb_Person.job)
}

// string name = 3;
inline void tb_Person::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& tb_Person::name() const {
  // @@protoc_insertion_point(field_get:db.tb_Person.name)
  return _internal_name();
}
inline void tb_Person::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:db.tb_Person.name)
}
inline std::string* tb_Person::mutable_name() {
  // @@protoc_insertion_point(field_mutable:db.tb_Person.name)
  return _internal_mutable_name();
}
inline const std::string& tb_Person::_internal_name() const {
  return name_.Get();
}
inline void tb_Person::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void tb_Person::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:db.tb_Person.name)
}
inline void tb_Person::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:db.tb_Person.name)
}
inline void tb_Person::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:db.tb_Person.name)
}
inline std::string* tb_Person::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* tb_Person::release_name() {
  // @@protoc_insertion_point(field_release:db.tb_Person.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void tb_Person::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:db.tb_Person.name)
}

// uint64 number = 4;
inline void tb_Person::clear_number() {
  number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 tb_Person::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 tb_Person::number() const {
  // @@protoc_insertion_point(field_get:db.tb_Person.number)
  return _internal_number();
}
inline void tb_Person::_internal_set_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  number_ = value;
}
inline void tb_Person::set_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:db.tb_Person.number)
}

// string email = 5;
inline void tb_Person::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& tb_Person::email() const {
  // @@protoc_insertion_point(field_get:db.tb_Person.email)
  return _internal_email();
}
inline void tb_Person::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:db.tb_Person.email)
}
inline std::string* tb_Person::mutable_email() {
  // @@protoc_insertion_point(field_mutable:db.tb_Person.email)
  return _internal_mutable_email();
}
inline const std::string& tb_Person::_internal_email() const {
  return email_.Get();
}
inline void tb_Person::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void tb_Person::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:db.tb_Person.email)
}
inline void tb_Person::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:db.tb_Person.email)
}
inline void tb_Person::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:db.tb_Person.email)
}
inline std::string* tb_Person::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* tb_Person::release_email() {
  // @@protoc_insertion_point(field_release:db.tb_Person.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void tb_Person::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:db.tb_Person.email)
}

// .db.PhoneType phonetype = 6;
inline void tb_Person::clear_phonetype() {
  phonetype_ = 0;
}
inline ::db::PhoneType tb_Person::_internal_phonetype() const {
  return static_cast< ::db::PhoneType >(phonetype_);
}
inline ::db::PhoneType tb_Person::phonetype() const {
  // @@protoc_insertion_point(field_get:db.tb_Person.phonetype)
  return _internal_phonetype();
}
inline void tb_Person::_internal_set_phonetype(::db::PhoneType value) {
  
  phonetype_ = value;
}
inline void tb_Person::set_phonetype(::db::PhoneType value) {
  _internal_set_phonetype(value);
  // @@protoc_insertion_point(field_set:db.tb_Person.phonetype)
}

// double money = 7;
inline void tb_Person::clear_money() {
  money_ = 0;
}
inline double tb_Person::_internal_money() const {
  return money_;
}
inline double tb_Person::money() const {
  // @@protoc_insertion_point(field_get:db.tb_Person.money)
  return _internal_money();
}
inline void tb_Person::_internal_set_money(double value) {
  
  money_ = value;
}
inline void tb_Person::set_money(double value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:db.tb_Person.money)
}

// float cash = 8;
inline void tb_Person::clear_cash() {
  cash_ = 0;
}
inline float tb_Person::_internal_cash() const {
  return cash_;
}
inline float tb_Person::cash() const {
  // @@protoc_insertion_point(field_get:db.tb_Person.cash)
  return _internal_cash();
}
inline void tb_Person::_internal_set_cash(float value) {
  
  cash_ = value;
}
inline void tb_Person::set_cash(float value) {
  _internal_set_cash(value);
  // @@protoc_insertion_point(field_set:db.tb_Person.cash)
}

// bytes itemlist = 20;
inline void tb_Person::clear_itemlist() {
  itemlist_.ClearToEmpty();
}
inline const std::string& tb_Person::itemlist() const {
  // @@protoc_insertion_point(field_get:db.tb_Person.itemlist)
  return _internal_itemlist();
}
inline void tb_Person::set_itemlist(const std::string& value) {
  _internal_set_itemlist(value);
  // @@protoc_insertion_point(field_set:db.tb_Person.itemlist)
}
inline std::string* tb_Person::mutable_itemlist() {
  // @@protoc_insertion_point(field_mutable:db.tb_Person.itemlist)
  return _internal_mutable_itemlist();
}
inline const std::string& tb_Person::_internal_itemlist() const {
  return itemlist_.Get();
}
inline void tb_Person::_internal_set_itemlist(const std::string& value) {
  
  itemlist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void tb_Person::set_itemlist(std::string&& value) {
  
  itemlist_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:db.tb_Person.itemlist)
}
inline void tb_Person::set_itemlist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  itemlist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:db.tb_Person.itemlist)
}
inline void tb_Person::set_itemlist(const void* value,
    size_t size) {
  
  itemlist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:db.tb_Person.itemlist)
}
inline std::string* tb_Person::_internal_mutable_itemlist() {
  
  return itemlist_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* tb_Person::release_itemlist() {
  // @@protoc_insertion_point(field_release:db.tb_Person.itemlist)
  return itemlist_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void tb_Person::set_allocated_itemlist(std::string* itemlist) {
  if (itemlist != nullptr) {
    
  } else {
    
  }
  itemlist_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), itemlist,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:db.tb_Person.itemlist)
}

// bytes equiplist = 21;
inline void tb_Person::clear_equiplist() {
  equiplist_.ClearToEmpty();
}
inline const std::string& tb_Person::equiplist() const {
  // @@protoc_insertion_point(field_get:db.tb_Person.equiplist)
  return _internal_equiplist();
}
inline void tb_Person::set_equiplist(const std::string& value) {
  _internal_set_equiplist(value);
  // @@protoc_insertion_point(field_set:db.tb_Person.equiplist)
}
inline std::string* tb_Person::mutable_equiplist() {
  // @@protoc_insertion_point(field_mutable:db.tb_Person.equiplist)
  return _internal_mutable_equiplist();
}
inline const std::string& tb_Person::_internal_equiplist() const {
  return equiplist_.Get();
}
inline void tb_Person::_internal_set_equiplist(const std::string& value) {
  
  equiplist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void tb_Person::set_equiplist(std::string&& value) {
  
  equiplist_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:db.tb_Person.equiplist)
}
inline void tb_Person::set_equiplist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  equiplist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:db.tb_Person.equiplist)
}
inline void tb_Person::set_equiplist(const void* value,
    size_t size) {
  
  equiplist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:db.tb_Person.equiplist)
}
inline std::string* tb_Person::_internal_mutable_equiplist() {
  
  return equiplist_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* tb_Person::release_equiplist() {
  // @@protoc_insertion_point(field_release:db.tb_Person.equiplist)
  return equiplist_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void tb_Person::set_allocated_equiplist(std::string* equiplist) {
  if (equiplist != nullptr) {
    
  } else {
    
  }
  equiplist_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), equiplist,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:db.tb_Person.equiplist)
}

// bytes tasklist = 22;
inline void tb_Person::clear_tasklist() {
  tasklist_.ClearToEmpty();
}
inline const std::string& tb_Person::tasklist() const {
  // @@protoc_insertion_point(field_get:db.tb_Person.tasklist)
  return _internal_tasklist();
}
inline void tb_Person::set_tasklist(const std::string& value) {
  _internal_set_tasklist(value);
  // @@protoc_insertion_point(field_set:db.tb_Person.tasklist)
}
inline std::string* tb_Person::mutable_tasklist() {
  // @@protoc_insertion_point(field_mutable:db.tb_Person.tasklist)
  return _internal_mutable_tasklist();
}
inline const std::string& tb_Person::_internal_tasklist() const {
  return tasklist_.Get();
}
inline void tb_Person::_internal_set_tasklist(const std::string& value) {
  
  tasklist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void tb_Person::set_tasklist(std::string&& value) {
  
  tasklist_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:db.tb_Person.tasklist)
}
inline void tb_Person::set_tasklist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tasklist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:db.tb_Person.tasklist)
}
inline void tb_Person::set_tasklist(const void* value,
    size_t size) {
  
  tasklist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:db.tb_Person.tasklist)
}
inline std::string* tb_Person::_internal_mutable_tasklist() {
  
  return tasklist_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* tb_Person::release_tasklist() {
  // @@protoc_insertion_point(field_release:db.tb_Person.tasklist)
  return tasklist_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void tb_Person::set_allocated_tasklist(std::string* tasklist) {
  if (tasklist != nullptr) {
    
  } else {
    
  }
  tasklist_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tasklist,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:db.tb_Person.tasklist)
}

// bytes skilllist = 23;
inline void tb_Person::clear_skilllist() {
  skilllist_.ClearToEmpty();
}
inline const std::string& tb_Person::skilllist() const {
  // @@protoc_insertion_point(field_get:db.tb_Person.skilllist)
  return _internal_skilllist();
}
inline void tb_Person::set_skilllist(const std::string& value) {
  _internal_set_skilllist(value);
  // @@protoc_insertion_point(field_set:db.tb_Person.skilllist)
}
inline std::string* tb_Person::mutable_skilllist() {
  // @@protoc_insertion_point(field_mutable:db.tb_Person.skilllist)
  return _internal_mutable_skilllist();
}
inline const std::string& tb_Person::_internal_skilllist() const {
  return skilllist_.Get();
}
inline void tb_Person::_internal_set_skilllist(const std::string& value) {
  
  skilllist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void tb_Person::set_skilllist(std::string&& value) {
  
  skilllist_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:db.tb_Person.skilllist)
}
inline void tb_Person::set_skilllist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  skilllist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:db.tb_Person.skilllist)
}
inline void tb_Person::set_skilllist(const void* value,
    size_t size) {
  
  skilllist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:db.tb_Person.skilllist)
}
inline std::string* tb_Person::_internal_mutable_skilllist() {
  
  return skilllist_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* tb_Person::release_skilllist() {
  // @@protoc_insertion_point(field_release:db.tb_Person.skilllist)
  return skilllist_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void tb_Person::set_allocated_skilllist(std::string* skilllist) {
  if (skilllist != nullptr) {
    
  } else {
    
  }
  skilllist_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skilllist,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:db.tb_Person.skilllist)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace db

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::db::MSGID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::db::MSGID>() {
  return ::db::MSGID_descriptor();
}
template <> struct is_proto_enum< ::db::PhoneType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::db::PhoneType>() {
  return ::db::PhoneType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_person_2eproto
