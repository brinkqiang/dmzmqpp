// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgperformance.proto

#include "msgperformance.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_msgperformance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_dmmeta_MapXmsgEntry_DoNotUse_msgperformance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msgperformance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_dmnode_xmsg_msgperformance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msgperformance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_dmnode_xtotal_msgperformance_2eproto;
namespace msgperformance {
class dmnode_xmsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<dmnode_xmsg> _instance;
} _dmnode_xmsg_default_instance_;
class dmnode_xtotalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<dmnode_xtotal> _instance;
} _dmnode_xtotal_default_instance_;
class dmmeta_MapXmsgEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<dmmeta_MapXmsgEntry_DoNotUse> _instance;
} _dmmeta_MapXmsgEntry_DoNotUse_default_instance_;
class dmmetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<dmmeta> _instance;
} _dmmeta_default_instance_;
}  // namespace msgperformance
static void InitDefaultsscc_info_dmmeta_msgperformance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msgperformance::_dmmeta_default_instance_;
    new (ptr) ::msgperformance::dmmeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_dmmeta_msgperformance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_dmmeta_msgperformance_2eproto}, {
      &scc_info_dmmeta_MapXmsgEntry_DoNotUse_msgperformance_2eproto.base,
      &scc_info_dmnode_xtotal_msgperformance_2eproto.base,}};

static void InitDefaultsscc_info_dmmeta_MapXmsgEntry_DoNotUse_msgperformance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msgperformance::_dmmeta_MapXmsgEntry_DoNotUse_default_instance_;
    new (ptr) ::msgperformance::dmmeta_MapXmsgEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_dmmeta_MapXmsgEntry_DoNotUse_msgperformance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_dmmeta_MapXmsgEntry_DoNotUse_msgperformance_2eproto}, {
      &scc_info_dmnode_xmsg_msgperformance_2eproto.base,}};

static void InitDefaultsscc_info_dmnode_xmsg_msgperformance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msgperformance::_dmnode_xmsg_default_instance_;
    new (ptr) ::msgperformance::dmnode_xmsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_dmnode_xmsg_msgperformance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_dmnode_xmsg_msgperformance_2eproto}, {}};

static void InitDefaultsscc_info_dmnode_xtotal_msgperformance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msgperformance::_dmnode_xtotal_default_instance_;
    new (ptr) ::msgperformance::dmnode_xtotal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_dmnode_xtotal_msgperformance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_dmnode_xtotal_msgperformance_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msgperformance_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_msgperformance_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msgperformance_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_msgperformance_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgperformance::dmnode_xmsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msgperformance::dmnode_xmsg, msgid_),
  PROTOBUF_FIELD_OFFSET(::msgperformance::dmnode_xmsg, maxconsumetime_),
  PROTOBUF_FIELD_OFFSET(::msgperformance::dmnode_xmsg, avgconsumetime_),
  PROTOBUF_FIELD_OFFSET(::msgperformance::dmnode_xmsg, totalconsumetime_),
  PROTOBUF_FIELD_OFFSET(::msgperformance::dmnode_xmsg, msgcount_),
  PROTOBUF_FIELD_OFFSET(::msgperformance::dmnode_xmsg, totalmsgsize_),
  PROTOBUF_FIELD_OFFSET(::msgperformance::dmnode_xmsg, lasttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgperformance::dmnode_xtotal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msgperformance::dmnode_xtotal, totalsize_),
  PROTOBUF_FIELD_OFFSET(::msgperformance::dmmeta_MapXmsgEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msgperformance::dmmeta_MapXmsgEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msgperformance::dmmeta_MapXmsgEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msgperformance::dmmeta_MapXmsgEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgperformance::dmmeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msgperformance::dmmeta, map_xmsg_),
  PROTOBUF_FIELD_OFFSET(::msgperformance::dmmeta, xtotal_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::msgperformance::dmnode_xmsg)},
  { 12, -1, sizeof(::msgperformance::dmnode_xtotal)},
  { 18, 25, sizeof(::msgperformance::dmmeta_MapXmsgEntry_DoNotUse)},
  { 27, -1, sizeof(::msgperformance::dmmeta)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgperformance::_dmnode_xmsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgperformance::_dmnode_xtotal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgperformance::_dmmeta_MapXmsgEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgperformance::_dmmeta_default_instance_),
};

const char descriptor_table_protodef_msgperformance_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024msgperformance.proto\022\016msgperformance\"\240"
  "\001\n\013dmnode_xmsg\022\r\n\005msgid\030\001 \001(\r\022\026\n\016maxcons"
  "umetime\030\002 \001(\004\022\026\n\016avgconsumetime\030\003 \001(\004\022\030\n"
  "\020totalconsumetime\030\004 \001(\004\022\020\n\010msgcount\030\005 \001("
  "\004\022\024\n\014totalmsgsize\030\006 \001(\004\022\020\n\010lasttime\030\007 \001("
  "\t\"\"\n\rdmnode_xtotal\022\021\n\ttotalsize\030\001 \001(\004\"\273\001"
  "\n\006dmmeta\0225\n\010map_xmsg\030\001 \003(\0132#.msgperforma"
  "nce.dmmeta.MapXmsgEntry\022-\n\006xtotal\030\002 \001(\0132"
  "\035.msgperformance.dmnode_xtotal\032K\n\014MapXms"
  "gEntry\022\013\n\003key\030\001 \001(\r\022*\n\005value\030\002 \001(\0132\033.msg"
  "performance.dmnode_xmsg:\0028\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_msgperformance_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_msgperformance_2eproto_sccs[4] = {
  &scc_info_dmmeta_msgperformance_2eproto.base,
  &scc_info_dmmeta_MapXmsgEntry_DoNotUse_msgperformance_2eproto.base,
  &scc_info_dmnode_xmsg_msgperformance_2eproto.base,
  &scc_info_dmnode_xtotal_msgperformance_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msgperformance_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msgperformance_2eproto = {
  false, false, descriptor_table_protodef_msgperformance_2eproto, "msgperformance.proto", 435,
  &descriptor_table_msgperformance_2eproto_once, descriptor_table_msgperformance_2eproto_sccs, descriptor_table_msgperformance_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_msgperformance_2eproto::offsets,
  file_level_metadata_msgperformance_2eproto, 4, file_level_enum_descriptors_msgperformance_2eproto, file_level_service_descriptors_msgperformance_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_msgperformance_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_msgperformance_2eproto)), true);
namespace msgperformance {

// ===================================================================

class dmnode_xmsg::_Internal {
 public:
};

dmnode_xmsg::dmnode_xmsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msgperformance.dmnode_xmsg)
}
dmnode_xmsg::dmnode_xmsg(const dmnode_xmsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lasttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lasttime().empty()) {
    lasttime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lasttime(), 
      GetArena());
  }
  ::memcpy(&maxconsumetime_, &from.maxconsumetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&msgid_) -
    reinterpret_cast<char*>(&maxconsumetime_)) + sizeof(msgid_));
  // @@protoc_insertion_point(copy_constructor:msgperformance.dmnode_xmsg)
}

void dmnode_xmsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_dmnode_xmsg_msgperformance_2eproto.base);
  lasttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&maxconsumetime_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&msgid_) -
      reinterpret_cast<char*>(&maxconsumetime_)) + sizeof(msgid_));
}

dmnode_xmsg::~dmnode_xmsg() {
  // @@protoc_insertion_point(destructor:msgperformance.dmnode_xmsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void dmnode_xmsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  lasttime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void dmnode_xmsg::ArenaDtor(void* object) {
  dmnode_xmsg* _this = reinterpret_cast< dmnode_xmsg* >(object);
  (void)_this;
}
void dmnode_xmsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void dmnode_xmsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const dmnode_xmsg& dmnode_xmsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_dmnode_xmsg_msgperformance_2eproto.base);
  return *internal_default_instance();
}


void dmnode_xmsg::Clear() {
// @@protoc_insertion_point(message_clear_start:msgperformance.dmnode_xmsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lasttime_.ClearToEmpty();
  ::memset(&maxconsumetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msgid_) -
      reinterpret_cast<char*>(&maxconsumetime_)) + sizeof(msgid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* dmnode_xmsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 msgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 maxconsumetime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxconsumetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 avgconsumetime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          avgconsumetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 totalconsumetime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          totalconsumetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 msgcount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          msgcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 totalmsgsize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          totalmsgsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lasttime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_lasttime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msgperformance.dmnode_xmsg.lasttime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* dmnode_xmsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgperformance.dmnode_xmsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msgid = 1;
  if (this->msgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msgid(), target);
  }

  // uint64 maxconsumetime = 2;
  if (this->maxconsumetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_maxconsumetime(), target);
  }

  // uint64 avgconsumetime = 3;
  if (this->avgconsumetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_avgconsumetime(), target);
  }

  // uint64 totalconsumetime = 4;
  if (this->totalconsumetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_totalconsumetime(), target);
  }

  // uint64 msgcount = 5;
  if (this->msgcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_msgcount(), target);
  }

  // uint64 totalmsgsize = 6;
  if (this->totalmsgsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_totalmsgsize(), target);
  }

  // string lasttime = 7;
  if (this->lasttime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lasttime().data(), static_cast<int>(this->_internal_lasttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msgperformance.dmnode_xmsg.lasttime");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_lasttime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgperformance.dmnode_xmsg)
  return target;
}

size_t dmnode_xmsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgperformance.dmnode_xmsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lasttime = 7;
  if (this->lasttime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lasttime());
  }

  // uint64 maxconsumetime = 2;
  if (this->maxconsumetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_maxconsumetime());
  }

  // uint64 avgconsumetime = 3;
  if (this->avgconsumetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_avgconsumetime());
  }

  // uint64 totalconsumetime = 4;
  if (this->totalconsumetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_totalconsumetime());
  }

  // uint64 msgcount = 5;
  if (this->msgcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msgcount());
  }

  // uint64 totalmsgsize = 6;
  if (this->totalmsgsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_totalmsgsize());
  }

  // uint32 msgid = 1;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_msgid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dmnode_xmsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msgperformance.dmnode_xmsg)
  GOOGLE_DCHECK_NE(&from, this);
  const dmnode_xmsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<dmnode_xmsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msgperformance.dmnode_xmsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msgperformance.dmnode_xmsg)
    MergeFrom(*source);
  }
}

void dmnode_xmsg::MergeFrom(const dmnode_xmsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgperformance.dmnode_xmsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lasttime().size() > 0) {
    _internal_set_lasttime(from._internal_lasttime());
  }
  if (from.maxconsumetime() != 0) {
    _internal_set_maxconsumetime(from._internal_maxconsumetime());
  }
  if (from.avgconsumetime() != 0) {
    _internal_set_avgconsumetime(from._internal_avgconsumetime());
  }
  if (from.totalconsumetime() != 0) {
    _internal_set_totalconsumetime(from._internal_totalconsumetime());
  }
  if (from.msgcount() != 0) {
    _internal_set_msgcount(from._internal_msgcount());
  }
  if (from.totalmsgsize() != 0) {
    _internal_set_totalmsgsize(from._internal_totalmsgsize());
  }
  if (from.msgid() != 0) {
    _internal_set_msgid(from._internal_msgid());
  }
}

void dmnode_xmsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msgperformance.dmnode_xmsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dmnode_xmsg::CopyFrom(const dmnode_xmsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgperformance.dmnode_xmsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dmnode_xmsg::IsInitialized() const {
  return true;
}

void dmnode_xmsg::InternalSwap(dmnode_xmsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lasttime_.Swap(&other->lasttime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(dmnode_xmsg, msgid_)
      + sizeof(dmnode_xmsg::msgid_)
      - PROTOBUF_FIELD_OFFSET(dmnode_xmsg, maxconsumetime_)>(
          reinterpret_cast<char*>(&maxconsumetime_),
          reinterpret_cast<char*>(&other->maxconsumetime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata dmnode_xmsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class dmnode_xtotal::_Internal {
 public:
};

dmnode_xtotal::dmnode_xtotal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msgperformance.dmnode_xtotal)
}
dmnode_xtotal::dmnode_xtotal(const dmnode_xtotal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  totalsize_ = from.totalsize_;
  // @@protoc_insertion_point(copy_constructor:msgperformance.dmnode_xtotal)
}

void dmnode_xtotal::SharedCtor() {
  totalsize_ = PROTOBUF_ULONGLONG(0);
}

dmnode_xtotal::~dmnode_xtotal() {
  // @@protoc_insertion_point(destructor:msgperformance.dmnode_xtotal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void dmnode_xtotal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void dmnode_xtotal::ArenaDtor(void* object) {
  dmnode_xtotal* _this = reinterpret_cast< dmnode_xtotal* >(object);
  (void)_this;
}
void dmnode_xtotal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void dmnode_xtotal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const dmnode_xtotal& dmnode_xtotal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_dmnode_xtotal_msgperformance_2eproto.base);
  return *internal_default_instance();
}


void dmnode_xtotal::Clear() {
// @@protoc_insertion_point(message_clear_start:msgperformance.dmnode_xtotal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  totalsize_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* dmnode_xtotal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 totalsize = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          totalsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* dmnode_xtotal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgperformance.dmnode_xtotal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 totalsize = 1;
  if (this->totalsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_totalsize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgperformance.dmnode_xtotal)
  return target;
}

size_t dmnode_xtotal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgperformance.dmnode_xtotal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 totalsize = 1;
  if (this->totalsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_totalsize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dmnode_xtotal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msgperformance.dmnode_xtotal)
  GOOGLE_DCHECK_NE(&from, this);
  const dmnode_xtotal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<dmnode_xtotal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msgperformance.dmnode_xtotal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msgperformance.dmnode_xtotal)
    MergeFrom(*source);
  }
}

void dmnode_xtotal::MergeFrom(const dmnode_xtotal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgperformance.dmnode_xtotal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.totalsize() != 0) {
    _internal_set_totalsize(from._internal_totalsize());
  }
}

void dmnode_xtotal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msgperformance.dmnode_xtotal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dmnode_xtotal::CopyFrom(const dmnode_xtotal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgperformance.dmnode_xtotal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dmnode_xtotal::IsInitialized() const {
  return true;
}

void dmnode_xtotal::InternalSwap(dmnode_xtotal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(totalsize_, other->totalsize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata dmnode_xtotal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

dmmeta_MapXmsgEntry_DoNotUse::dmmeta_MapXmsgEntry_DoNotUse() {}
dmmeta_MapXmsgEntry_DoNotUse::dmmeta_MapXmsgEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void dmmeta_MapXmsgEntry_DoNotUse::MergeFrom(const dmmeta_MapXmsgEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata dmmeta_MapXmsgEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void dmmeta_MapXmsgEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class dmmeta::_Internal {
 public:
  static const ::msgperformance::dmnode_xtotal& xtotal(const dmmeta* msg);
};

const ::msgperformance::dmnode_xtotal&
dmmeta::_Internal::xtotal(const dmmeta* msg) {
  return *msg->xtotal_;
}
dmmeta::dmmeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  map_xmsg_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msgperformance.dmmeta)
}
dmmeta::dmmeta(const dmmeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_xmsg_.MergeFrom(from.map_xmsg_);
  if (from._internal_has_xtotal()) {
    xtotal_ = new ::msgperformance::dmnode_xtotal(*from.xtotal_);
  } else {
    xtotal_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:msgperformance.dmmeta)
}

void dmmeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_dmmeta_msgperformance_2eproto.base);
  xtotal_ = nullptr;
}

dmmeta::~dmmeta() {
  // @@protoc_insertion_point(destructor:msgperformance.dmmeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void dmmeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete xtotal_;
}

void dmmeta::ArenaDtor(void* object) {
  dmmeta* _this = reinterpret_cast< dmmeta* >(object);
  (void)_this;
}
void dmmeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void dmmeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const dmmeta& dmmeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_dmmeta_msgperformance_2eproto.base);
  return *internal_default_instance();
}


void dmmeta::Clear() {
// @@protoc_insertion_point(message_clear_start:msgperformance.dmmeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_xmsg_.Clear();
  if (GetArena() == nullptr && xtotal_ != nullptr) {
    delete xtotal_;
  }
  xtotal_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* dmmeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<uint32, .msgperformance.dmnode_xmsg> map_xmsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_xmsg_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .msgperformance.dmnode_xtotal xtotal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_xtotal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* dmmeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgperformance.dmmeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .msgperformance.dmnode_xmsg> map_xmsg = 1;
  if (!this->_internal_map_xmsg().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::msgperformance::dmnode_xmsg >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_xmsg().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_xmsg().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::msgperformance::dmnode_xmsg >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::msgperformance::dmnode_xmsg >::const_iterator
          it = this->_internal_map_xmsg().begin();
          it != this->_internal_map_xmsg().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = dmmeta_MapXmsgEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::msgperformance::dmnode_xmsg >::const_iterator
          it = this->_internal_map_xmsg().begin();
          it != this->_internal_map_xmsg().end(); ++it) {
        target = dmmeta_MapXmsgEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  // .msgperformance.dmnode_xtotal xtotal = 2;
  if (this->has_xtotal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::xtotal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgperformance.dmmeta)
  return target;
}

size_t dmmeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgperformance.dmmeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .msgperformance.dmnode_xmsg> map_xmsg = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_xmsg_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::msgperformance::dmnode_xmsg >::const_iterator
      it = this->_internal_map_xmsg().begin();
      it != this->_internal_map_xmsg().end(); ++it) {
    total_size += dmmeta_MapXmsgEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .msgperformance.dmnode_xtotal xtotal = 2;
  if (this->has_xtotal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *xtotal_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dmmeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msgperformance.dmmeta)
  GOOGLE_DCHECK_NE(&from, this);
  const dmmeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<dmmeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msgperformance.dmmeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msgperformance.dmmeta)
    MergeFrom(*source);
  }
}

void dmmeta::MergeFrom(const dmmeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgperformance.dmmeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_xmsg_.MergeFrom(from.map_xmsg_);
  if (from.has_xtotal()) {
    _internal_mutable_xtotal()->::msgperformance::dmnode_xtotal::MergeFrom(from._internal_xtotal());
  }
}

void dmmeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msgperformance.dmmeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dmmeta::CopyFrom(const dmmeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgperformance.dmmeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dmmeta::IsInitialized() const {
  return true;
}

void dmmeta::InternalSwap(dmmeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  map_xmsg_.Swap(&other->map_xmsg_);
  swap(xtotal_, other->xtotal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata dmmeta::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgperformance
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msgperformance::dmnode_xmsg* Arena::CreateMaybeMessage< ::msgperformance::dmnode_xmsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgperformance::dmnode_xmsg >(arena);
}
template<> PROTOBUF_NOINLINE ::msgperformance::dmnode_xtotal* Arena::CreateMaybeMessage< ::msgperformance::dmnode_xtotal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgperformance::dmnode_xtotal >(arena);
}
template<> PROTOBUF_NOINLINE ::msgperformance::dmmeta_MapXmsgEntry_DoNotUse* Arena::CreateMaybeMessage< ::msgperformance::dmmeta_MapXmsgEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgperformance::dmmeta_MapXmsgEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msgperformance::dmmeta* Arena::CreateMaybeMessage< ::msgperformance::dmmeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgperformance::dmmeta >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
