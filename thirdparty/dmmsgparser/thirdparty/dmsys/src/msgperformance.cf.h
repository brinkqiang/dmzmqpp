/********************************************************************
**       This head file is generated by program,                   **
**            Please do not change it directly.                    **
**                   Auther: brinkqiang                            **
********************************************************************/
// source: msgperformance.proto
/********************************************************************
// sample
#include "dmutil.h"
#include "msgperformance.cf.h"
class MyCDMCF_msgperformance : public CDMCF_msgperformance
{
public:
    virtual ~MyCDMCF_msgperformance(){}

    virtual std::string GetPath()
    {
        std::string strPath = fmt::format("{}{}{}{}{}", DMGetRootPath(), CONFIG_PATH_DELIMITER, "..", CONFIG_PATH_DELIMITER, "config");
        DMCreateDirectories(strPath.c_str());
        return strPath;
    }
    virtual std::string GetTplPath()
    {
        std::string strPath = fmt::format("{}{}{}{}{}", DMGetRootPath(), CONFIG_PATH_DELIMITER, "..", CONFIG_PATH_DELIMITER, "config_template");
        DMCreateDirectories(strPath.c_str());
        return strPath;
    }
};
********************************************************************/
#ifndef __MSGPERFORMANCE_CF_H__
#define __MSGPERFORMANCE_CF_H__

#include "msgperformance.pb.h"
#include "dmpolicyx.h"

class CDMCF_msgperformance : public IDMErrorData
{
public:
    CDMCF_msgperformance();
    virtual ~CDMCF_msgperformance();

    bool FillTemplateFile(const std::string& strPath = "");

    std::string FormatMDHeader(std::vector<std::string>& vecList);
    bool SaveMD(const std::string& strPath = "");

    bool SaveMD_map_xmsg(const std::string& strPath = "");


    bool SaveMD_xtotal(const std::string& strPath = "");

    std::ostream& GetMDDoc_map_xmsg(std::ostream& os);


    std::ostream& GetMDDoc_xtotal(std::ostream& os);

    bool LoadJSON(const std::string& strPath = "");
    bool SaveJSON(const std::string& strPath = "");

    bool LoadXLSX(const std::string& strPath = "");
    bool SaveXLSX(const std::string& strPath = "");


    void WriteXLSXHeader_dmnode_xmsg(int index, XLWorksheet& sheet);
    void WriteXLSXHeader_dmnode_xtotal(int index, XLWorksheet& sheet);

    void ReadXLSX_dmnode_xmsg(::msgperformance::dmnode_xmsg& node, int& i, int& j, XLWorksheet& sheet);
    void ReadXLSX_dmnode_xtotal(::msgperformance::dmnode_xtotal& node, int& i, int& j, XLWorksheet& sheet);

    void  WriteXLSX_dmnode_xmsg(::msgperformance::dmnode_xmsg& node, int& i, int& j, XLWorksheet& sheet);
    void  WriteXLSX_dmnode_xtotal(::msgperformance::dmnode_xtotal& node, int& i, int& j, XLWorksheet& sheet);

    void SaveXLSX_map_xmsg(XLWorksheet& sheet);


    void SaveXLSX_xtotal(XLWorksheet& sheet);

    bool LoadCSV(const std::string& strPath = "");
    bool SaveCSV(const std::string& strPath = "");

    bool LoadCSV_map_xmsg(const std::string& strPath = "");


    bool LoadCSV_xtotal(const std::string& strPath = "");

    bool SaveCSV_map_xmsg(const std::string& strPath = "");


    bool SaveCSV_xtotal(const std::string& strPath = "");

    std::ostream& GetCSVDoc_map_xmsg(std::ostream& os);


    std::ostream& GetCSVDoc_xtotal(std::ostream& os);

    void ReadCSV_dmnode_xmsg(::msgperformance::dmnode_xmsg& node, int& j, csv::CSVRow& row);
    void ReadCSV_dmnode_xtotal(::msgperformance::dmnode_xtotal& node, int& j, csv::CSVRow& row);

    void WriteCSV_dmnode_xmsg(std::ostream& os, const ::msgperformance::dmnode_xmsg& node, const std::string& delim);
    void WriteCSV_dmnode_xtotal(std::ostream& os, const ::msgperformance::dmnode_xtotal& node, const std::string& delim);

    void WriteCSVHeader_dmnode_xmsg(std::ostream& os, const std::string& name, const std::string& delim);
    void WriteCSVHeader_dmnode_xtotal(std::ostream& os, const std::string& name, const std::string& delim);

    bool LoadXML(const std::string& strPath = "");
    bool SaveXML(const std::string& strPath = "");

    bool SetXMLDoc(const std::string& strDoc);
    std::ostream& GetXMLDoc(std::ostream& os);

    void LoadXML_map_xmsg(pugi::xml_node& datas);


    void LoadXML_xtotal(pugi::xml_node& datas);

    void SaveXML_map_xmsg(pugi::xml_node& map_xmsg);


    void SaveXML_xtotal(pugi::xml_node& xtotal);

    void ReadXML_dmnode_xmsg(::msgperformance::dmnode_xmsg& node, const pugi::xml_node& oXml);
    void ReadXML_dmnode_xtotal(::msgperformance::dmnode_xtotal& node, const pugi::xml_node& oXml);

    void WriteXML_dmnode_xmsg(::msgperformance::dmnode_xmsg& node, pugi::xml_node& oXml);
    void WriteXML_dmnode_xtotal(::msgperformance::dmnode_xtotal& node, pugi::xml_node& oXml);
public:
    ::msgperformance::dmmeta& GetMeta() { return m_dmmeta; }
private:
    ::msgperformance::dmmeta m_dmmeta;
};

#endif  // __MSGPERFORMANCE_CF_H__
