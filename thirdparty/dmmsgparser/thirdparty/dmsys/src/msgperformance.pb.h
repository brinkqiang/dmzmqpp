// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgperformance.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msgperformance_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msgperformance_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msgperformance_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msgperformance_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msgperformance_2eproto;
namespace msgperformance {
class dmmeta;
class dmmetaDefaultTypeInternal;
extern dmmetaDefaultTypeInternal _dmmeta_default_instance_;
class dmmeta_MapXmsgEntry_DoNotUse;
class dmmeta_MapXmsgEntry_DoNotUseDefaultTypeInternal;
extern dmmeta_MapXmsgEntry_DoNotUseDefaultTypeInternal _dmmeta_MapXmsgEntry_DoNotUse_default_instance_;
class dmnode_xmsg;
class dmnode_xmsgDefaultTypeInternal;
extern dmnode_xmsgDefaultTypeInternal _dmnode_xmsg_default_instance_;
class dmnode_xtotal;
class dmnode_xtotalDefaultTypeInternal;
extern dmnode_xtotalDefaultTypeInternal _dmnode_xtotal_default_instance_;
}  // namespace msgperformance
PROTOBUF_NAMESPACE_OPEN
template<> ::msgperformance::dmmeta* Arena::CreateMaybeMessage<::msgperformance::dmmeta>(Arena*);
template<> ::msgperformance::dmmeta_MapXmsgEntry_DoNotUse* Arena::CreateMaybeMessage<::msgperformance::dmmeta_MapXmsgEntry_DoNotUse>(Arena*);
template<> ::msgperformance::dmnode_xmsg* Arena::CreateMaybeMessage<::msgperformance::dmnode_xmsg>(Arena*);
template<> ::msgperformance::dmnode_xtotal* Arena::CreateMaybeMessage<::msgperformance::dmnode_xtotal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msgperformance {

// ===================================================================

class dmnode_xmsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgperformance.dmnode_xmsg) */ {
 public:
  inline dmnode_xmsg() : dmnode_xmsg(nullptr) {}
  virtual ~dmnode_xmsg();

  dmnode_xmsg(const dmnode_xmsg& from);
  dmnode_xmsg(dmnode_xmsg&& from) noexcept
    : dmnode_xmsg() {
    *this = ::std::move(from);
  }

  inline dmnode_xmsg& operator=(const dmnode_xmsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline dmnode_xmsg& operator=(dmnode_xmsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const dmnode_xmsg& default_instance();

  static inline const dmnode_xmsg* internal_default_instance() {
    return reinterpret_cast<const dmnode_xmsg*>(
               &_dmnode_xmsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(dmnode_xmsg& a, dmnode_xmsg& b) {
    a.Swap(&b);
  }
  inline void Swap(dmnode_xmsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dmnode_xmsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline dmnode_xmsg* New() const final {
    return CreateMaybeMessage<dmnode_xmsg>(nullptr);
  }

  dmnode_xmsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<dmnode_xmsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const dmnode_xmsg& from);
  void MergeFrom(const dmnode_xmsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dmnode_xmsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgperformance.dmnode_xmsg";
  }
  protected:
  explicit dmnode_xmsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msgperformance_2eproto);
    return ::descriptor_table_msgperformance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLasttimeFieldNumber = 7,
    kMaxconsumetimeFieldNumber = 2,
    kAvgconsumetimeFieldNumber = 3,
    kTotalconsumetimeFieldNumber = 4,
    kMsgcountFieldNumber = 5,
    kTotalmsgsizeFieldNumber = 6,
    kMsgidFieldNumber = 1,
  };
  // string lasttime = 7;
  void clear_lasttime();
  const std::string& lasttime() const;
  void set_lasttime(const std::string& value);
  void set_lasttime(std::string&& value);
  void set_lasttime(const char* value);
  void set_lasttime(const char* value, size_t size);
  std::string* mutable_lasttime();
  std::string* release_lasttime();
  void set_allocated_lasttime(std::string* lasttime);
  private:
  const std::string& _internal_lasttime() const;
  void _internal_set_lasttime(const std::string& value);
  std::string* _internal_mutable_lasttime();
  public:

  // uint64 maxconsumetime = 2;
  void clear_maxconsumetime();
  ::PROTOBUF_NAMESPACE_ID::uint64 maxconsumetime() const;
  void set_maxconsumetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_maxconsumetime() const;
  void _internal_set_maxconsumetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 avgconsumetime = 3;
  void clear_avgconsumetime();
  ::PROTOBUF_NAMESPACE_ID::uint64 avgconsumetime() const;
  void set_avgconsumetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_avgconsumetime() const;
  void _internal_set_avgconsumetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 totalconsumetime = 4;
  void clear_totalconsumetime();
  ::PROTOBUF_NAMESPACE_ID::uint64 totalconsumetime() const;
  void set_totalconsumetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_totalconsumetime() const;
  void _internal_set_totalconsumetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 msgcount = 5;
  void clear_msgcount();
  ::PROTOBUF_NAMESPACE_ID::uint64 msgcount() const;
  void set_msgcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msgcount() const;
  void _internal_set_msgcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 totalmsgsize = 6;
  void clear_totalmsgsize();
  ::PROTOBUF_NAMESPACE_ID::uint64 totalmsgsize() const;
  void set_totalmsgsize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_totalmsgsize() const;
  void _internal_set_totalmsgsize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 msgid = 1;
  void clear_msgid();
  ::PROTOBUF_NAMESPACE_ID::uint32 msgid() const;
  void set_msgid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msgid() const;
  void _internal_set_msgid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:msgperformance.dmnode_xmsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lasttime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 maxconsumetime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 avgconsumetime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 totalconsumetime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msgcount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 totalmsgsize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msgid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msgperformance_2eproto;
};
// -------------------------------------------------------------------

class dmnode_xtotal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgperformance.dmnode_xtotal) */ {
 public:
  inline dmnode_xtotal() : dmnode_xtotal(nullptr) {}
  virtual ~dmnode_xtotal();

  dmnode_xtotal(const dmnode_xtotal& from);
  dmnode_xtotal(dmnode_xtotal&& from) noexcept
    : dmnode_xtotal() {
    *this = ::std::move(from);
  }

  inline dmnode_xtotal& operator=(const dmnode_xtotal& from) {
    CopyFrom(from);
    return *this;
  }
  inline dmnode_xtotal& operator=(dmnode_xtotal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const dmnode_xtotal& default_instance();

  static inline const dmnode_xtotal* internal_default_instance() {
    return reinterpret_cast<const dmnode_xtotal*>(
               &_dmnode_xtotal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(dmnode_xtotal& a, dmnode_xtotal& b) {
    a.Swap(&b);
  }
  inline void Swap(dmnode_xtotal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dmnode_xtotal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline dmnode_xtotal* New() const final {
    return CreateMaybeMessage<dmnode_xtotal>(nullptr);
  }

  dmnode_xtotal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<dmnode_xtotal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const dmnode_xtotal& from);
  void MergeFrom(const dmnode_xtotal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dmnode_xtotal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgperformance.dmnode_xtotal";
  }
  protected:
  explicit dmnode_xtotal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msgperformance_2eproto);
    return ::descriptor_table_msgperformance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalsizeFieldNumber = 1,
  };
  // uint64 totalsize = 1;
  void clear_totalsize();
  ::PROTOBUF_NAMESPACE_ID::uint64 totalsize() const;
  void set_totalsize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_totalsize() const;
  void _internal_set_totalsize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:msgperformance.dmnode_xtotal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 totalsize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msgperformance_2eproto;
};
// -------------------------------------------------------------------

class dmmeta_MapXmsgEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<dmmeta_MapXmsgEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::msgperformance::dmnode_xmsg,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<dmmeta_MapXmsgEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::msgperformance::dmnode_xmsg,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  dmmeta_MapXmsgEntry_DoNotUse();
  explicit dmmeta_MapXmsgEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const dmmeta_MapXmsgEntry_DoNotUse& other);
  static const dmmeta_MapXmsgEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const dmmeta_MapXmsgEntry_DoNotUse*>(&_dmmeta_MapXmsgEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msgperformance_2eproto);
    return ::descriptor_table_msgperformance_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class dmmeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgperformance.dmmeta) */ {
 public:
  inline dmmeta() : dmmeta(nullptr) {}
  virtual ~dmmeta();

  dmmeta(const dmmeta& from);
  dmmeta(dmmeta&& from) noexcept
    : dmmeta() {
    *this = ::std::move(from);
  }

  inline dmmeta& operator=(const dmmeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline dmmeta& operator=(dmmeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const dmmeta& default_instance();

  static inline const dmmeta* internal_default_instance() {
    return reinterpret_cast<const dmmeta*>(
               &_dmmeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(dmmeta& a, dmmeta& b) {
    a.Swap(&b);
  }
  inline void Swap(dmmeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dmmeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline dmmeta* New() const final {
    return CreateMaybeMessage<dmmeta>(nullptr);
  }

  dmmeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<dmmeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const dmmeta& from);
  void MergeFrom(const dmmeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dmmeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgperformance.dmmeta";
  }
  protected:
  explicit dmmeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msgperformance_2eproto);
    return ::descriptor_table_msgperformance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapXmsgFieldNumber = 1,
    kXtotalFieldNumber = 2,
  };
  // map<uint32, .msgperformance.dmnode_xmsg> map_xmsg = 1;
  int map_xmsg_size() const;
  private:
  int _internal_map_xmsg_size() const;
  public:
  void clear_map_xmsg();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::msgperformance::dmnode_xmsg >&
      _internal_map_xmsg() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::msgperformance::dmnode_xmsg >*
      _internal_mutable_map_xmsg();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::msgperformance::dmnode_xmsg >&
      map_xmsg() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::msgperformance::dmnode_xmsg >*
      mutable_map_xmsg();

  // .msgperformance.dmnode_xtotal xtotal = 2;
  bool has_xtotal() const;
  private:
  bool _internal_has_xtotal() const;
  public:
  void clear_xtotal();
  const ::msgperformance::dmnode_xtotal& xtotal() const;
  ::msgperformance::dmnode_xtotal* release_xtotal();
  ::msgperformance::dmnode_xtotal* mutable_xtotal();
  void set_allocated_xtotal(::msgperformance::dmnode_xtotal* xtotal);
  private:
  const ::msgperformance::dmnode_xtotal& _internal_xtotal() const;
  ::msgperformance::dmnode_xtotal* _internal_mutable_xtotal();
  public:
  void unsafe_arena_set_allocated_xtotal(
      ::msgperformance::dmnode_xtotal* xtotal);
  ::msgperformance::dmnode_xtotal* unsafe_arena_release_xtotal();

  // @@protoc_insertion_point(class_scope:msgperformance.dmmeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      dmmeta_MapXmsgEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::msgperformance::dmnode_xmsg,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> map_xmsg_;
  ::msgperformance::dmnode_xtotal* xtotal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msgperformance_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// dmnode_xmsg

// uint32 msgid = 1;
inline void dmnode_xmsg::clear_msgid() {
  msgid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dmnode_xmsg::_internal_msgid() const {
  return msgid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dmnode_xmsg::msgid() const {
  // @@protoc_insertion_point(field_get:msgperformance.dmnode_xmsg.msgid)
  return _internal_msgid();
}
inline void dmnode_xmsg::_internal_set_msgid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msgid_ = value;
}
inline void dmnode_xmsg::set_msgid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:msgperformance.dmnode_xmsg.msgid)
}

// uint64 maxconsumetime = 2;
inline void dmnode_xmsg::clear_maxconsumetime() {
  maxconsumetime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 dmnode_xmsg::_internal_maxconsumetime() const {
  return maxconsumetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 dmnode_xmsg::maxconsumetime() const {
  // @@protoc_insertion_point(field_get:msgperformance.dmnode_xmsg.maxconsumetime)
  return _internal_maxconsumetime();
}
inline void dmnode_xmsg::_internal_set_maxconsumetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  maxconsumetime_ = value;
}
inline void dmnode_xmsg::set_maxconsumetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_maxconsumetime(value);
  // @@protoc_insertion_point(field_set:msgperformance.dmnode_xmsg.maxconsumetime)
}

// uint64 avgconsumetime = 3;
inline void dmnode_xmsg::clear_avgconsumetime() {
  avgconsumetime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 dmnode_xmsg::_internal_avgconsumetime() const {
  return avgconsumetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 dmnode_xmsg::avgconsumetime() const {
  // @@protoc_insertion_point(field_get:msgperformance.dmnode_xmsg.avgconsumetime)
  return _internal_avgconsumetime();
}
inline void dmnode_xmsg::_internal_set_avgconsumetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  avgconsumetime_ = value;
}
inline void dmnode_xmsg::set_avgconsumetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_avgconsumetime(value);
  // @@protoc_insertion_point(field_set:msgperformance.dmnode_xmsg.avgconsumetime)
}

// uint64 totalconsumetime = 4;
inline void dmnode_xmsg::clear_totalconsumetime() {
  totalconsumetime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 dmnode_xmsg::_internal_totalconsumetime() const {
  return totalconsumetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 dmnode_xmsg::totalconsumetime() const {
  // @@protoc_insertion_point(field_get:msgperformance.dmnode_xmsg.totalconsumetime)
  return _internal_totalconsumetime();
}
inline void dmnode_xmsg::_internal_set_totalconsumetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  totalconsumetime_ = value;
}
inline void dmnode_xmsg::set_totalconsumetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_totalconsumetime(value);
  // @@protoc_insertion_point(field_set:msgperformance.dmnode_xmsg.totalconsumetime)
}

// uint64 msgcount = 5;
inline void dmnode_xmsg::clear_msgcount() {
  msgcount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 dmnode_xmsg::_internal_msgcount() const {
  return msgcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 dmnode_xmsg::msgcount() const {
  // @@protoc_insertion_point(field_get:msgperformance.dmnode_xmsg.msgcount)
  return _internal_msgcount();
}
inline void dmnode_xmsg::_internal_set_msgcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msgcount_ = value;
}
inline void dmnode_xmsg::set_msgcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msgcount(value);
  // @@protoc_insertion_point(field_set:msgperformance.dmnode_xmsg.msgcount)
}

// uint64 totalmsgsize = 6;
inline void dmnode_xmsg::clear_totalmsgsize() {
  totalmsgsize_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 dmnode_xmsg::_internal_totalmsgsize() const {
  return totalmsgsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 dmnode_xmsg::totalmsgsize() const {
  // @@protoc_insertion_point(field_get:msgperformance.dmnode_xmsg.totalmsgsize)
  return _internal_totalmsgsize();
}
inline void dmnode_xmsg::_internal_set_totalmsgsize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  totalmsgsize_ = value;
}
inline void dmnode_xmsg::set_totalmsgsize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_totalmsgsize(value);
  // @@protoc_insertion_point(field_set:msgperformance.dmnode_xmsg.totalmsgsize)
}

// string lasttime = 7;
inline void dmnode_xmsg::clear_lasttime() {
  lasttime_.ClearToEmpty();
}
inline const std::string& dmnode_xmsg::lasttime() const {
  // @@protoc_insertion_point(field_get:msgperformance.dmnode_xmsg.lasttime)
  return _internal_lasttime();
}
inline void dmnode_xmsg::set_lasttime(const std::string& value) {
  _internal_set_lasttime(value);
  // @@protoc_insertion_point(field_set:msgperformance.dmnode_xmsg.lasttime)
}
inline std::string* dmnode_xmsg::mutable_lasttime() {
  // @@protoc_insertion_point(field_mutable:msgperformance.dmnode_xmsg.lasttime)
  return _internal_mutable_lasttime();
}
inline const std::string& dmnode_xmsg::_internal_lasttime() const {
  return lasttime_.Get();
}
inline void dmnode_xmsg::_internal_set_lasttime(const std::string& value) {
  
  lasttime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void dmnode_xmsg::set_lasttime(std::string&& value) {
  
  lasttime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msgperformance.dmnode_xmsg.lasttime)
}
inline void dmnode_xmsg::set_lasttime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lasttime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msgperformance.dmnode_xmsg.lasttime)
}
inline void dmnode_xmsg::set_lasttime(const char* value,
    size_t size) {
  
  lasttime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msgperformance.dmnode_xmsg.lasttime)
}
inline std::string* dmnode_xmsg::_internal_mutable_lasttime() {
  
  return lasttime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* dmnode_xmsg::release_lasttime() {
  // @@protoc_insertion_point(field_release:msgperformance.dmnode_xmsg.lasttime)
  return lasttime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void dmnode_xmsg::set_allocated_lasttime(std::string* lasttime) {
  if (lasttime != nullptr) {
    
  } else {
    
  }
  lasttime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lasttime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msgperformance.dmnode_xmsg.lasttime)
}

// -------------------------------------------------------------------

// dmnode_xtotal

// uint64 totalsize = 1;
inline void dmnode_xtotal::clear_totalsize() {
  totalsize_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 dmnode_xtotal::_internal_totalsize() const {
  return totalsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 dmnode_xtotal::totalsize() const {
  // @@protoc_insertion_point(field_get:msgperformance.dmnode_xtotal.totalsize)
  return _internal_totalsize();
}
inline void dmnode_xtotal::_internal_set_totalsize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  totalsize_ = value;
}
inline void dmnode_xtotal::set_totalsize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_totalsize(value);
  // @@protoc_insertion_point(field_set:msgperformance.dmnode_xtotal.totalsize)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// dmmeta

// map<uint32, .msgperformance.dmnode_xmsg> map_xmsg = 1;
inline int dmmeta::_internal_map_xmsg_size() const {
  return map_xmsg_.size();
}
inline int dmmeta::map_xmsg_size() const {
  return _internal_map_xmsg_size();
}
inline void dmmeta::clear_map_xmsg() {
  map_xmsg_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::msgperformance::dmnode_xmsg >&
dmmeta::_internal_map_xmsg() const {
  return map_xmsg_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::msgperformance::dmnode_xmsg >&
dmmeta::map_xmsg() const {
  // @@protoc_insertion_point(field_map:msgperformance.dmmeta.map_xmsg)
  return _internal_map_xmsg();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::msgperformance::dmnode_xmsg >*
dmmeta::_internal_mutable_map_xmsg() {
  return map_xmsg_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::msgperformance::dmnode_xmsg >*
dmmeta::mutable_map_xmsg() {
  // @@protoc_insertion_point(field_mutable_map:msgperformance.dmmeta.map_xmsg)
  return _internal_mutable_map_xmsg();
}

// .msgperformance.dmnode_xtotal xtotal = 2;
inline bool dmmeta::_internal_has_xtotal() const {
  return this != internal_default_instance() && xtotal_ != nullptr;
}
inline bool dmmeta::has_xtotal() const {
  return _internal_has_xtotal();
}
inline void dmmeta::clear_xtotal() {
  if (GetArena() == nullptr && xtotal_ != nullptr) {
    delete xtotal_;
  }
  xtotal_ = nullptr;
}
inline const ::msgperformance::dmnode_xtotal& dmmeta::_internal_xtotal() const {
  const ::msgperformance::dmnode_xtotal* p = xtotal_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgperformance::dmnode_xtotal&>(
      ::msgperformance::_dmnode_xtotal_default_instance_);
}
inline const ::msgperformance::dmnode_xtotal& dmmeta::xtotal() const {
  // @@protoc_insertion_point(field_get:msgperformance.dmmeta.xtotal)
  return _internal_xtotal();
}
inline void dmmeta::unsafe_arena_set_allocated_xtotal(
    ::msgperformance::dmnode_xtotal* xtotal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(xtotal_);
  }
  xtotal_ = xtotal;
  if (xtotal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgperformance.dmmeta.xtotal)
}
inline ::msgperformance::dmnode_xtotal* dmmeta::release_xtotal() {
  
  ::msgperformance::dmnode_xtotal* temp = xtotal_;
  xtotal_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msgperformance::dmnode_xtotal* dmmeta::unsafe_arena_release_xtotal() {
  // @@protoc_insertion_point(field_release:msgperformance.dmmeta.xtotal)
  
  ::msgperformance::dmnode_xtotal* temp = xtotal_;
  xtotal_ = nullptr;
  return temp;
}
inline ::msgperformance::dmnode_xtotal* dmmeta::_internal_mutable_xtotal() {
  
  if (xtotal_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgperformance::dmnode_xtotal>(GetArena());
    xtotal_ = p;
  }
  return xtotal_;
}
inline ::msgperformance::dmnode_xtotal* dmmeta::mutable_xtotal() {
  // @@protoc_insertion_point(field_mutable:msgperformance.dmmeta.xtotal)
  return _internal_mutable_xtotal();
}
inline void dmmeta::set_allocated_xtotal(::msgperformance::dmnode_xtotal* xtotal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete xtotal_;
  }
  if (xtotal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(xtotal);
    if (message_arena != submessage_arena) {
      xtotal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, xtotal, submessage_arena);
    }
    
  } else {
    
  }
  xtotal_ = xtotal;
  // @@protoc_insertion_point(field_set_allocated:msgperformance.dmmeta.xtotal)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgperformance

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msgperformance_2eproto
